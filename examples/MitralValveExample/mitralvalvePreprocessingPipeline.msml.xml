<msml:msml xmlns:msml="http://sfb125.de/msml"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://sfb125.de/msml">

    <variables>
        <var name="input_mv_surf_mesh"
             value="XNAT_Segmentations/MitralValve_annotatedSegmentation_P0067_fineMesh_0.vtp"
             logical="TriangularSurface" physical="vtp"/>
        <var name="input_mv_ring"
             value="XNAT_Segmentations/MitralValve_AnnuloplastyRing_OptimallyPlaced_P0067_PhysioII_34_0.vtp"
             logical="object" physical="vtp"/>
    </variables>

    <scene>
        <object id="mitralvalve">
            <mesh>
                <linearTet id="mvVolMesh" mesh="${aVtuToHf3inpIncMVmatIDsProducer.inpMeshFile}"/>
            </mesh>

            <material>
                <region id="mvMaterial" indices="${aVtuToHf3inpIncMVmatIDsProducer.tet_material}">
                    <materialID matID="10"/>
                    <linearElasticMaterial youngModulus="4166" poissonRatio="0.488"/>
                    <mass name="stdMass" massDensity="1.000"/>
                </region>
            </material>

            <constraints>
                <constraint name="bodyConstraint" forStep="${initial_def_1}">
                    <mvGeometryConstraint mvGeometry="${anMvGeometryAnalyzer}"/>
                    <!-- <displacementConstraint indices="${AnnulusPointsToBeDisplacedBySewingProcedureToIndexGroup}" displacement="0.0 0.02 0.0"/> -->
                    <displacedPointsConstraint points="${aBCdataForMVRsimProducer.points}"
                                               displacements="${aBCdataForMVRsimProducer.displacements}"/>
 
                    <surfacePressure indices="0" pressure="0"/>
                </constraint>
            </constraints>

            <output>
                <displacement id="mitralvalve" timestep="1"/>
            </output>
        </object>
    </scene>

    <workflow>
        <!-- <ConvertSTLToVTK id="vtkConverter" STLMesh="mitralvalveSegmentation.stl" targetFilename="mitralvalveSegmentation.vtk"/> -->
        <!-- ConvertSTLToVTK-Operator not needed anymore -->

        <!-- <SurfaceToVoxelDataOperator id="aSurfaceToVoxelsOperator" surfaceMesh="XNAT_Segmentations/MitralValve_annotatedSegmentation_P0067_fineMesh_0.vtp" 
                       targetImageFilename="mvImage.vti" accuracy_level="7" smoothing="1"/> -->
        <SurfaceToVoxelDataOperator id="aSurfaceToVoxelsOperator" surfaceMesh="${input_mv_surf_mesh}"
                                    targetImageFilename="mvImage.vti" accuracy_level="7" smoothing="1"/>
        <!-- SurfaceToVoxelDataOperator might be replaced by DistanceMapOperator -->

        <vtkMarchingCube id="aVoxelToContourOperator" image="${aSurfaceToVoxelsOperator}"
                         outFilename="mvVolumeSurface.vtk" isoValue="90"/>
        <!-- vtkMarchingCube might be replaced by Voxel2ContourOperator -->
        <!-- maybe rather MSMLalize/implement own ImageToContourSurfaceMesh.py operator for this task -->

        <!-- <ReduceSurfaceMesh(std::string infile, std::string outfile, int verticesCount, bool forceManifold, bool asciiOutput) -->
        <!-- ACVD_Remeshing_Operator / MeshCellNumber_Reduction_Operator -->
        <!-- ReduceSurfaceMesh/ACVDremeshing-Operator not needed anymore -->

        <CGALMeshVolumeFromSurface id="aVolumeMesher" meshFilename="mvVolumeMesh3D_CGAL.vtk"
                                   surfaceMesh="${aVoxelToContourOperator}"
                                   preserveFeatures="false" facetAngle="20" facetSize="2" facetDistance="0.4"
                                   cellRadiusEdgeRatio="3" cellSize="0.5" odt="false" lloyd="false" pertube="false"
                                   exude="false"/>


        <!-- convertVTKbinaryToVTU probably not needed, since automatic conversion takes place if needed -->
        <!-- currently two (double) files are in the out-folder -->
        <!-- later update "volume"-tag in the below vtuToHf3inpIncMVmatIDsProducer/mvGeometryAnalytics/mvrBCdataProducer with "${aVolumeMesher}" -->


        <!-- <vtuToHf3inpIncMVmatIDsProducer id="aVtuToHf3inpIncMVmatIDsProducer" inputfilename="${vtuConverter}" 
                       surfaceMesh="XNAT_Segmentations/MitralValve_annotatedSegmentation_P0067_fineMesh_0.vtp" 
                       outputfilename="mvVolumeMesh3D_hf3inp.inp"/> -->
        <vtuToHf3inpIncMVmatIDsProducer id="aVtuToHf3inpIncMVmatIDsProducer"
                                        volume="${aVolumeMesher}"
                                        surface="${input_mv_surf_mesh}"
                                        />
        <!-- possibly update with newer stabil version of MSMLalized vtuToHf3inpIncMVmatIDsProducer-Python-Script -->

        <!-- <mvGeometryAnalytics id="anMvGeometryAnalyzer" inputfilename="${aVolumeMesher}" 
                       ringFilename="XNAT_Segmentations/MitralValve_AnnuloplastyRing_OptimallyPlaced_P0067_PhysioII_34_0.vtp" 
                       outputfilename="mvGeometryAnalyticsData.txt"/> -->
        <mvGeometryAnalytics id="anMvGeometryAnalyzer"
                             surface="${aVolumeMesher}"
                             ring="${input_mv_ring}"/>

        <!-- <mvrBCdataProducer id="aBCdataForMVRsimProducer" inputfilename="${aVolumeMesher}" 
                       surfaceMesh="XNAT_Segmentations/MitralValve_annotatedSegmentation_P0067_fineMesh_0.vtp" 
                       ringFilename="XNAT_Segmentations/MitralValve_AnnuloplastyRing_OptimallyPlaced_P0067_PhysioII_34_0.vtp" 
                       outputfilename="mvrSimBCdata.xml"/> -->
        <mvrBCdataProducer id="aBCdataForMVRsimProducer"
                           volumeMesh="${aVolumeMesher}"
                           surfaceMesh="${input_mv_surf_mesh}"
                           ring="${input_mv_ring}"/>


        <!-- Simulation_Mgmt_Operator to organize/distribute MV-scenarios-->

        <!-- EXECUTE_HIFLOW3_SIMULATION -->


        <!-- pvtu2vtu-Operator -->
        <!-- pvtu2vtu-Operator not needed anymore -->

        <!-- <vonMisesStressComputation_mvrPostProcessingAnalytics id="aVonMisesStressComputingOperator" inputfilename="${hf3Simulation}"
                       outputfilename="mvr_esim_extendedData.vtu"/> -->
        <!-- How to include simulation results in MSML pipeline?! -->
        <!-- How to execute script for simulation results of all timesteps (and set according naming w.r.t. ts_)?! -->
        <!-- VonMisesStressVisualization_PostProcessing_Operator -->

    </workflow>

    <environment>
        <solver linearSolver="CG" preconditioner="SGAUSS_SEIDEL" hf3_chanceOfContactBoolean="1"
                processingUnit="CPU" numParallelProcessesOnCPU="4"
                timeIntegration="Newmark" dampingRayleighRatioMass="0.5" dampingRayleighRatioStiffness="0.5"/>
        <simulation>
            <step name="initial_implantation_displacement" dt="0.05" iterations="20"/>
            <!-- <step name="subsequent_pause" dt="0.05" iterations="20"/> -->
            <!-- <step name="subsequent_blood_pressure_and_mv_closing" dt="0.01" iterations="500"/> -->
        </simulation>
    </environment>

</msml:msml>
